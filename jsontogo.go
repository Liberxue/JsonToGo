package main

import (
	"encoding/json"
	"io"
	"io/ioutil"
	"net/http"
	"strings"
)

func getUrl(url string) ([]byte, error) {
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("Cookie", "vYIkZmkrMXL2dsF2DVEFJLJPJAOC8iIdA=")
	r, err := http.DefaultClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer r.Body.Close()
	b, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, err
	}
	return b, nil
}

func parseJson(b []byte) (interface{}, error) {
	var f interface{}
	err := json.Unmarshal(b, &f)
	if err != nil {
		return nil, err
	}
	return f, nil
}

type Hubs struct {
	TypeOrm string
	Name    string
}

const (
	DepthID           = "$"
	DefaultStructName = "AutoGenerated"
)

type Depth struct {
	root        interface{}
	depthStruct int
	Struct      *Struct
}

func parseScope(reader io.Reader, hub Hubs) (string, error) {
	var f interface{}
	if err := json.NewDecoder(reader).Decode(&f); err != nil {
		return "", err
	}
	//need check mark
	if len(hub.Name) <= 0 {
		hub.Name = DefaultStructName
	}
	depths := NewDepth(f)
	depths.run()
	return depths.output(), nil
}

func NewDepth(root interface{}) *Depth {
	return &Depth{root: root}
}

func (w *Depth) run() {
	w.depth(DepthID, DefaultStructName, w.root, nil)
}
func (w *Depth) output() string {
	return strings.Join(nil, "\n\n")
}

type Struct struct {
	Key  string
	Name string
}

func (w *Depth) depth(path, name string, data interface{}, parent *Struct) {

}

func getType(data interface{}) {

}
